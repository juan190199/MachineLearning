import numpy as npdef euclidean_distance(x, y, loop=False):    """    Calculate euclidean distance    :param x: ndarray (n, d) -- ndarray with data points    :param y: ndarray (m, d) -- ndarray with data points    :param loop: boolean --    If True, calculate euclidean distance with for loops.    Otherwise, calculate euclidean distance by vectorizing calculations    :return: ndarray (n, m) -- euclidean dstance between all data points    """    dist = np.empty((x.shape[0], y.shape[0]), dtype=np.float64)    if loop == True:        for j in range(y.shape[0]):            for i in range(x.shape[0]):                dist[i, j] = np.sqrt(np.sum(np.square(x[i, :] - y[j, :])))        np.testing.assert_array_equal(dist, np.linalg.norm(x[:, None, :] - y[None, :, :], axis=-1))        return dist    else:        dist = np.sqrt(            np.sum(np.square(np.subtract(x[:, None, :], y)), axis=2)        )        np.testing.assert_array_equal(dist, np.linalg.norm(x[:, None, :] - y[None, :, :], axis=-1))        return distdef euclidean_norm(x, y):    """    Computes euclidean norm between two ndarrays    :param x: ndarray (n, d) -- ndarray with data points    :param y: ndarray (m, d) -- ndarray with data points    :return: ndarray (n, m) -- Euclidean norm between all data points    """    return np.linalg.norm(x[:, None, :] - y[None, :, :], axis=-1)def fade_zeros(s):    """    Fade 0s in pandas.DataFrame    :param s:    :return: list -- Cells with lightgray color in pandas.DataFrame    """    return ["color: lightgray" if (v == 0) else "color: black" for v in s]